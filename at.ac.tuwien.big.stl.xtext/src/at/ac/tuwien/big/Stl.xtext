// automatically generated by Xtext
grammar at.ac.tuwien.big.Stl with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/Stl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

System returns System:
	'system' name=ID '{'
	(itemTypes += ItemType)*
	(areas += Area)*
	'}'
	;

Area returns Area:
	'area' name=ID '{'
	(components += Component)*
	(connectors += Connector)*
	'}'
;

ItemType returns ItemType:
	'item' name=ID '=' EString
;

Component returns Component:
	Store|ItemGenerator|Conveyor|TurnTable|Machine|Buffer
;

ItemGenerator returns ItemGenerator:
	'generator' name=ID 'generates' generatedType = [ItemType|QualifiedName]  '(cost=' cost=INT')' '{'
	'output' outputSlots+= Slot
	(services+=Service)*
	'}'
;


Conveyor returns Conveyor:
	'conveyor' name=ID '(cost=' cost=INT')' '{'
	'input' inputSlots+= Slot
	'output' outputSlots+= Slot
	(services+=Service)*
	'}'
;

TurnTable returns TurnTable:
	'turntable' name=ID '(cost=' cost=INT')' '{'
	('input' inputSlots+= Slot)+
	('output' outputSlots+= Slot)+
	(services+=Service)*
	'}'
;

Machine returns Machine:
	'machine' name=ID '(cost=' cost=INT')' '{'
	('input' inputSlots+= Slot)+
	('output' outputSlots+= Slot)+
	(services+=Service)*
	'}'
;

Buffer returns Buffer:
	'buffer' name=ID '(cost=' cost=INT')' '{'
	'input' inputSlots+= Slot
	'output' outputSlots+= Slot
	(services+=Service)*
	'}'
;

Store returns Store:
	ProductStore|WasteStore
;

ProductStore returns ProductStore:
	'productStore' name=ID '(cost=' cost=INT',capacity='capacity=INT')' '{'
	'input' inputSlots+= Slot
	(services+=Service)*
	'}'
;

WasteStore returns WasteStore:
	'wasteStore' name=ID '(cost='cost=INT',capacity='capacity=INT')' '{'
	'input' inputSlots+= Slot
	(services+=Service)*
	'}'
;

Connector returns Connector:
	entry=[Slot|QualifiedName]'>'exit=[Slot|QualifiedName]
;

Slot returns Slot:
	name=ID ':' requiredType= [ItemType|QualifiedName]
;

Service returns Service:
	'service' name=ID '(cost='cost=INT',reliability='reliability=EDouble ',processingTime='processingTime= INT')' 
	('{' 
		('input' parameters+= Parameter)*
	'}')?
;
Parameter returns Parameter:
	name=ID
;

QualifiedName returns ecore::EString:
	ID (=> '.' ID)*;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
