/*
 * generated by Xtext 2.12.0
 */
package at.ac.tuwien.big.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import at.ac.tuwien.big.stl.Area;
import at.ac.tuwien.big.stl.Component;
import at.ac.tuwien.big.stl.STLPackage;
import at.ac.tuwien.big.stl.Slot;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class StlScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * TODO: Scoping for the output slot of an item generator
	 * 
	 * The required item type defined by an output slot of an item generator
	 * (reference Slot.requiredType) has to be the item type defined by the item
	 * generator as generated type (reference ItemGenerator.generatedType)
	 */

	/**
	 * TODO: Scoping for the exit slot of a connector
	 * 
	 * The exit slot of a connector has to be an input slot of a component defined
	 * in the same STL system. The slot may not be defined by the component that
	 * contains the entry slot of the connector. Furthermore, the exit slot has to
	 * define the same required type (reference Slot.requiredType) as the entry slot
	 * of the connector.
	 */
	
	/**
	 * GIVEN: Scoping for Connector.entry: The entry slot of a connector has to be
	 * an output slot of a component.
	 * 
	 * @param area
	 *            Area in which the connector is defined
	 * @param eReference
	 *            Connector.entry reference
	 * @return The output slots of all system components
	 */
	public IScope scope_Slot(Area area, EReference eReference) {
		if (!eReference.equals(STLPackage.Literals.CONNECTOR__ENTRY)) {
			List<Slot> allSlots = new ArrayList<Slot>();
			allSlots.addAll(getAllInputSlots(getSystem(area)));
			allSlots.addAll(getAllOutputSlots(getSystem(area)));
			return Scopes.scopeFor(allSlots);
		}
		return Scopes.scopeFor(getAllOutputSlots(getSystem(area)));
	}

	/**
	 * GIVEN: Convenience function to retrieves the component containing a slot.
	 * 
	 * @param slot
	 *            Slot for which the containing component should be retrieved.
	 * @return Component that contains the given slot
	 */
	private Component getComponent(Slot slot) {
		return (Component) slot.eContainer();
	}

	/**
	 * GIVEN: Convenience function to retrieve the system containing an object of an
	 * STL model.
	 * 
	 * @param eObject
	 *            eObject defined in an STL model for which the containing STL
	 *            system should be retrieved
	 * @return STL system that contains the given eObject
	 */
	private at.ac.tuwien.big.stl.System getSystem(EObject eObject) {
		if (eObject instanceof at.ac.tuwien.big.stl.System) {
			return (at.ac.tuwien.big.stl.System) eObject;
		} else if (eObject.eContainer() != null) {
			return getSystem(eObject.eContainer());
		}
		return null;
	}

	/**
	 * GIVEN: Convenience function to retrieve all input slots of a system.
	 * 
	 * @param system
	 *            STL system for which all input slots should be retrieved
	 * @return All input slots defined in the given STL system
	 */
	private List<Slot> getAllInputSlots(at.ac.tuwien.big.stl.System system) {
		List<Slot> slotList = new ArrayList<>();
		system.getAreas().forEach(a -> a.getComponents().forEach(c -> slotList.addAll(c.getInputSlots())));
		return slotList;
	}

	/**
	 * GIVEN: Convenience function to retrieve all output slots of a system.
	 * 
	 * @param system
	 *            STL system for which all output slots should be retrieved
	 * @return All output slots defined in the given STL system
	 */
	private List<Slot> getAllOutputSlots(at.ac.tuwien.big.stl.System system) {
		List<Slot> slotList = new ArrayList<>();
		system.getAreas().forEach(a -> a.getComponents().forEach(c -> slotList.addAll(c.getOutputSlots())));
		return slotList;
	}

}
